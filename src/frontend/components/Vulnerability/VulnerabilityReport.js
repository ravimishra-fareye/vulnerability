import React, { useState } from "react";
import "./styles.css";
import VulnerabilityModal from "../VulnerabilityModal/VulnerabilityModal";
import FileExplorer from '../FileExplorer/FileExplorer';

const VulnerabilityReport = () => {
  const [modalData, setModalData] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 10;

  const handleVulnerabilityClick = (data) => {
    setModalData(data);
  };

  const handleCloseModal = () => {
    setModalData(null);
  };

  const vulnerabilityData = [
    { type: "Mobi", author: "ABC", vulnerabilities: 3, key: ["key1", "key2", "key3"], filePath: ["/path/to/file1", "/path/to/file2", "/path/to/file3"] },
    { type: "Routing", author: "XYZ", vulnerabilities: 4, key: ["key4", "key5", "key6", "key7"], filePath: ["/path/to/file4", "/path/to/file5", "/path/to/file6", "/path/to/file7"] },
    { type: "Mobi", author: "ABC", vulnerabilities: 3, key: ["key1", "key2", "key3"], filePath: ["/path/to/file1", "/path/to/file2", "/path/to/file3"] },
    { type: "Routing", author: "XYZ", vulnerabilities: 4, key: ["key4", "key5", "key6", "key7"], filePath: ["/path/to/file4", "/path/to/file5", "/path/to/file6", "/path/to/file7"] },
    { type: "Mobi", author: "ABC", vulnerabilities: 3, key: ["key1", "key2", "key3"], filePath: ["/path/to/file1", "/path/to/file2", "/path/to/file3"] },
    { type: "Routing", author: "XYZ", vulnerabilities: 4, key: ["key4", "key5", "key6", "key7"], filePath: ["/path/to/file4", "/path/to/file5", "/path/to/file6", "/path/to/file7"] },
    { type: "Mobi", author: "ABC", vulnerabilities: 3, key: ["key1", "key2", "key3"], filePath: ["/path/to/file1", "/path/to/file2", "/path/to/file3"] },
    { type: "Routing", author: "XYZ", vulnerabilities: 4, key: ["key4", "key5", "key6", "key7"], filePath: ["/path/to/file4", "/path/to/file5", "/path/to/file6", "/path/to/file7"] },
    { type: "Mobi", author: "ABC", vulnerabilities: 3, key: ["key1", "key2", "key3"], filePath: ["/path/to/file1", "/path/to/file2", "/path/to/file3"] },
    { type: "Routing", author: "XYZ", vulnerabilities: 4, key: ["key4", "key5", "key6", "key7"], filePath: ["/path/to/file4", "/path/to/file5", "/path/to/file6", "/path/to/file7"] },
    { type: "Mobi", author: "ABC", vulnerabilities: 3, key: ["key1", "key2", "key3"], filePath: ["/path/to/file1", "/path/to/file2", "/path/to/file3"] },
  ];

  const totalVulnerabilities = vulnerabilityData.reduce(
    (total, data) => total + (typeof data.vulnerabilities === 'number' ? data.vulnerabilities : 0),
    0
  );

  const totalPages = Math.ceil(vulnerabilityData.length / recordsPerPage);
  const startIndex = (currentPage - 1) * recordsPerPage;
  const displayedData = vulnerabilityData.slice(startIndex, startIndex + recordsPerPage);

  return (
    <div className="div">
      <>
        <div className="container">
          <div className="file-explorer">
            <FileExplorer />
          </div>
          <div className="total-vulnerabilities">
            Total Vulnerabilities: {totalVulnerabilities}
          </div>
        </div>
        <div className="wrapper">
          <div className="table">
            <div className="header-row">
              <div className="header-cell">Repos</div>
              <div className="header-cell">Count</div>
              <div className="header-cell">Author</div>
            </div>
            {displayedData.map((data, index) => (
              <div key={index}>
                <div className="body-row" onClick={() => handleVulnerabilityClick(data)}>
                  <div className="body-cell">{data.type}</div>
                  <div className="body-cell vulnerability-container">
                    <div className="vulnerability-box">
                      <div className="vulnerability-item">
                        {data.vulnerabilities}
                      </div>
                    </div>
                  </div>
                  <div className="body-cell">{data.author}</div>
                </div>
                {index < displayedData.length - 1 && (
                  <hr className="horizontal-line" />
                )}
              </div>
            ))}
          </div>
          {totalPages > 1 && (
            <div className="pagination">
              {Array.from({ length: totalPages }, (_, i) => (
                <button
                  key={i + 1}
                  onClick={() => setCurrentPage(i + 1)}
                  className={currentPage === i + 1 ? 'active' : ''}
                >
                  {i + 1}
                </button>
              ))}
            </div>
          )}
        </div>
      </>
      <VulnerabilityModal isOpen={!!modalData} onClose={handleCloseModal} data={modalData} />
    </div>
  );
};

export default VulnerabilityReport;
